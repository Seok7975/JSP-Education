보통 Pooling이라고 하면 Pool(수영장)이라는 단어를 떠올리시면 됩니다. 

풀링 기법이라는 것은 디자인 패턴의 일종인데, 한번 생성될 때 자원의 소모가 크며, 굳이 계속해서 생성, 소멸시킬 필요가 없다고 생각되는 객체를 미리 여러개 만들어 놓은 뒤, 그 것들을 계속 써먹는 기법이라고 보시면 됩니다.


흔히 Servlet과 같은 웹프로그래밍에서는, DB Connection Pooling이라는 것을 무조건(?) 사용합니다.

DB와의 통신이 빈번하게 이뤄지는 웹 어플리케이션의 경우,

자원의 소모가 가장 심하게 이뤄지는 부분이 바로 이 DB Connection 생성이라고 할 수 있는데,

수백명의 클라이언트가 동시에 접속해서 수십번의 요청을 날린다고 해서,

그 횟수만큼 Connection 객체를 생성/소멸시키면, 서버의 부하는 상당히 극심할 것입니다.

그래서 미리 연결을 시켜놓은 몇 개의 Connection 객체를 생성해놓고,

이들을 별도의 공간에 대기시키죠. 흔히 이를 Factory라고 부릅니다.

여튼 이런식으로 미리 연결되어있는 일정 수의 Connection 객체를 돌아가면서 사용하는 식으로 DB 연결이 이뤄집니다. 정확히 말하면 DB 연결은 계속 되있고 돌아가면서 그 연결을 통해 쿼리를 날린다고 해야할 것입니다.

보통 Servlet Container들에서는 JNDI와 DataSource라는 것을 이용해서, DB Connection Pooling을 쉽게 구현할 수 있습니다.

여튼 Pooling은 이런식으로 여러 객체를 미리 생성해놓고, 미리 생성된 객체를 다른 여러 객체가 돌아가면서 사용하는 그런 기법을 의미합니다.