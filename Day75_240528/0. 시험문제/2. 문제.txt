1. 서블릿에서 데이터를 저장하는 영역? 그리고 그 범위에 대해 설명
페이지 객체, 요청 객체, 세션 객체, ServletContext 객체
페이지 객체는 현재 페이지 내에서만 사용할 변수를 저장하는 영역이고, 
요청 객체는 요청 객체가 유지되는 영역에서 사용할 변수를 저장하는 영역이다. 
세션 객체는 웹 브라우저가 종료되기 전까지나 세션이 끊어지기 전까지 
사용할 변수를 저장하는 영역이고, 
ServletContext 객체는 서버가 종료되기 전까지 사용할 변수를 저장하는 영역이다. 
이들 각 영역에 저장된 데이터를 사용해서 
여러 페이지에 걸쳐 필요한 범위까지 변수를 선언할 수 있다.

2. 쿠키(Cookie)
쿠키 데이터는 앞서 말한 데이터 저장 영역의 데이터와는 달리 
클라이언트에 저장하는 데이터이다. 
사용자별로 관리해야 하는 데이터 중 비중이 낮은 데이터를 
굳이 서버에서 관리하여 부하를 늘릴 필요가 없다. 
이런 데이터를 서버는 클라이언트의 Cookies 폴더에 저장했다가 
필요할 때 다시 꺼내서 사용한다. 
예를 들어, 사용자의 로그인 ID를 쿠키로 저장했다가 
사이트에 접속할 때 사용자 정보를 꺼내서 사용하는 경우이다.

3. HttpSession session = request.getSession(false);
위에서 HttpSession session = request.getSession(); 두 메소드의 차이는?
getSession(), getSession(true)와 getSession(false)의 차이점
둘 다 세션을 받아올 때 사용되지만 이 둘에는 차이점이 있다. 
getSession(), getSession(true)는 세션이 이미 있는지 확인을 하여, 
이미 있다면 그 세션을 반환시키고, 없으면 새로운 세션을 생성한다. 
이에 반면 getSession(false)는 세션이 있다면 그 세션을 리턴하지만 
세션이 존재하지 않는다면 null을 리턴한다.

즉, getSession(true)에서는 기존의 세션이든 새로운 세션이든 무조건 세션을 받아오지만, 
getSession(false)에서는 세션이 있을 경우에만 세션을 리턴하므로 반드시 null 체크를 해야한다.

  1 if(request.getSession(false) == null) { 
  2   // do something.. 
  3 }

4. 요청 객체자체에 data1에 문자열 "java"를 저장하고 data2에 Vector<String>을 저장하고  
그 Vector 객체에 "C"와 "C++"를 추가하도록 하자. 
그리고 요청 객체에 질의로 data3에 "string"과 data4에 "ok"를 forward로 보내자. 
서블릿 클래스 이름은 RequestSend라고 하고 
forward 되는 곳의 클래스 이름은 RequestReceive 로 하도록 하자.
그리고 RequestReceive에서 모든 Data 들의 값을 출력하자.

중요 : 
요청 객체의 질의로는 문자열만 전송할 수 있지만 
요청 객체 자체에는 객체를 저장할 수 있다는 것이다.

5. 
SessionSend라는 서블릿에서 request 객체를 이용하여 속성이름을 data1, 
"홍길동"이라고 준다. 세션 객체를 이용해서 속성을 부여하는 데 data2, 
"자바" 그리고 Calendar에 대한 객체를 생성하고 그 객체의 주소를 data3에 각각 저장하도록 하자.
그리고 forward로 SessionReceive1로 이동하여 각각의 값을 출력하도록 하자. 
그런 후에 SessionReceive1 에 다음페이지로라는 a 태그 링크를 삽입하고 
그 링크를 클릭했을 시에 SessionReceive2 으로 이동하도록 하여 각각의 값을 다시 출력해 보자.

6. 크롬에 저장된 쿠키보기?

참고 
Cookies 폴더에는 서버가 클라이언트와의 네트워크 통신에 필요한 몇 가지 데이터를 파일로 남길 수 있다. 그리고 서버 자신이 남긴 파일에 한해서 접근할 수 있다. 이 폴더에 있는 파일의 데이터를 우리는 쿠키라고 부른다.
쿠키 데이터는 남겨질 때 사용될 수 있는 시간을 기록하는데 이 시간이 경과하면 더 이상 쿠키 데이터를 사용할 수 없다.

7. Round15_04_ServletContext_01에 "안녕하세요! 우리 서버에 오신 것을 환영합니다."라는 말을 ServletContext에 저장하고 저장이 완료되면 "ServletContext 데이터 생성 완료!"라고 출력하자. Round15_04_ServletContext_02에 접속하는 모든 클라이언트에게 서버의 인사말을 출력하도록 하자.